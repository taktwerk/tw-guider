create table
  categories (
    id bigint not null,
    name character not null,
    created_at dateTime not null,
    created_by bigint not null,
    updated_at dateTime not null,
    updated_by bigint not null,
    deleted_at dateTime null,
    deleted_by bigint null,
    constraint category_pkey primary key (id),
    constraint category_created_by_fkey foreign key (created_by) references users (id),
    constraint category_deleted_by_fkey foreign key (deleted_by) references users (id),
    constraint category_updated_by_fkey foreign key (updated_by) references users (id)
  ) as Category;


create table
  instructions (
    id bigint,
    title character not null,
    short_title character not null,
    image character not null,
    description character not null,
    created_at dateTime not null,
    created_by bigint not null,
    updated_at dateTime not null,
    updated_by bigint not null,
    deleted_at dateTime null,
    deleted_by bigint null,
    constraint instruction_pkey primary key (id),
    constraint instruction_created_by_fkey foreign key (created_by) references users (id),
    constraint instruction_deleted_by_fkey foreign key (deleted_by) references users (id),
    constraint instruction_updated_by_fkey foreign key (updated_by) references users (id)
  );

  create table
  feedback (
    id char(20) not null,
    is_synced bool not null,
    instruction_id bigint not null,
    user_id bigint not null,
    message character not null,
    image character null,
    created_at datetime not null,
    created_by bigint not null,
    updated_at datetime not null,
    updated_by bigint not null,
    deleted_at datetime null,
    deleted_by bigint null,
    constraint feedback_pkey primary key (id),
    constraint feedback_created_by_fkey foreign key (created_by) references users (id),
    constraint feedback_deleted_by_fkey foreign key (deleted_by) references users (id),
    constraint feedback_instruction_id_fkey foreign key (instruction_id) references instructions (id),
    constraint feedback_updated_by_fkey foreign key (updated_by) references users (id),
    constraint feedback_user_id_fkey foreign key (user_id) references users (id)
  ) as Feedback;

  create table
  histories (
    user_id bigint not null,
    instruction_id bigint not null,
    created_at datetime not null,
    created_by bigint not null,
    updated_at datetime not null,
    updated_by bigint not null,
    deleted_at datetime null,
    deleted_by bigint null,
    instruction_step_id bigint null,
    constraint history_pkey primary key (user_id, instruction_id),
    constraint history_instruction_id_fkey foreign key (instruction_id) references instructions (id) on delete cascade,
    constraint history_instruction_step_id_fkey foreign key (instruction_step_id) references instruction_steps (id) on delete cascade,
    constraint history_user_id_fkey foreign key (user_id) references users (id) on delete cascade,
    constraint history_deleted_by_fkey foreign key (deleted_by) references users (id),
    constraint history_created_by_fkey foreign key (created_by) references users (id),
    constraint history_updated_by_fkey foreign key (updated_by) references users (id)
  ) as History;

  create table
  users (
    id bigint,
    username character not null,
    role character not null,
    created_at datetime not null,
    created_by bigint not null,
    updated_at datetime not null,
    updated_by bigint not null,
    deleted_at datetime null,
    deleted_by bigint null,
    constraint user_pkey primary key (id),
    constraint user_created_by_fkey foreign key (created_by) references users (id),
    constraint user_deleted_by_fkey foreign key (deleted_by) references users (id),
    constraint user_updated_by_fkey foreign key (updated_by) references users (id)
  );

  create table
  instruction_steps (
    id bigint,
    instruction_id bigint not null,
    step_nr bigint not null,
    description character not null,
    image character not null,
    created_at datetime not null,
    created_by bigint not null,
    updated_at datetime not null,
    updated_by bigint not null,
    deleted_at datetime null,
    deleted_by bigint null,
    constraint instruction_steps_pkey primary key (id),
    constraint instruction_step_instruction_id_fkey foreign key (instruction_id) references instructions (id) on delete cascade,
    constraint instruction_step_created_by_fkey foreign key (created_by) references users (id),
    constraint instruction_step_deleted_by_fkey foreign key (deleted_by) references users (id),
    constraint instruction_step_updated_by_fkey foreign key (updated_by) references users (id)

  );

  create table
  InstructionsCategories (
    category_id bigint not null,
    instruction_id bigint not null,
    created_at datetime not null,
    created_by bigint not null,
    updated_at datetime not null,
    updated_by bigint not null,
    deleted_at datetime null,
    deleted_by bigint null,
    constraint instruction_category_pkey primary key (category_id, instruction_id),
    constraint instruction_category_category_id_fkey foreign key (category_id) references categories (id) on delete cascade,
    constraint instruction_category_instruction_id_fkey foreign key (instruction_id) references instructions (id) on delete cascade,
    constraint instruction_category_created_by_fkey foreign key (created_by) references users (id),
    constraint instruction_category_deleted_by_fkey foreign key (deleted_by) references users (id),
    constraint instruction_category_updated_by_fkey foreign key (updated_by) references users (id)
  ) as InstructionCategory;

  create table
  settings (
    user_id bigint,
    language character not null,
    created_at datetime not null,
    created_by bigint not null,
    updated_at datetime not null,
    updated_by bigint not null,
    deleted_at datetime null,
    deleted_by bigint null,
    constraint setting_pkey primary key (user_id),
    constraint setting_user_id_fkey foreign key (user_id) references users (id) on delete cascade,
    constraint setting_created_by_fkey foreign key (created_by) references users (id),
    constraint setting_deleted_by_fkey foreign key (deleted_by) references users (id),
    constraint setting_updated_by_fkey foreign key (updated_by) references users (id)
  );

  create table
  bytes (
    feedback_id char(20) not null,
    image character not null,
    imageXid char(20) not null,
    constraint bytes_pkey primary key (feedback_id),
    constraint bytes_feedback_id_fkey foreign key (feedback_id) references feedback (id) on delete cascade
  );


updateHistoryEntry(REQUIRED :instruction_id as int, REQUIRED :updated_at as datetime): WITH new_id AS (SELECT :instruction_id AS instruction_id, :updated_at as updated_at)
INSERT INTO histories (user_id, instruction_id, created_by, created_at, updated_at, updated_by, instruction_step_id)
VALUES (:user_id,(SELECT instruction_id FROM new_id), :created_by, :created_at, :updated_at, :updated_by, (SELECT i.id FROM instruction_steps i
WHERE i.step_nr = (SELECT MIN(j.step_nr) FROM instruction_steps j WHERE j.instruction_id = (SELECT instruction_id FROM new_id)) AND i.instruction_id = (SELECT instruction_id FROM new_id)))
ON CONFLICT (user_id, instruction_id) DO UPDATE
SET updated_at = (SELECT updated_at FROM new_id);
